package swing.special;

import javax.swing.*;
import java.io.*;
import javax.xml.parsers.*; // XML Parser �� ����
import org.w3c.dom.*;   // DOM ��ü�� ����
import javax.xml.transform.*;   // ��ȯ�� ����
import javax.xml.transform.dom.*;   // DOM ��ü�� ���� ������ ������
import javax.xml.transform.stream.*;    // ��Ʈ���� ���� ������ ������

public class SpecialJFrame extends JFrame {
    
    /** Creates new form SpecialJFrame */
    public SpecialJFrame() {
        initComponents();
        this.setSize(640, 480);
        
        buttonGroupType.add(jRadioButtonXML);
        buttonGroupType.add(jRadioButtonSAM);
        buttonGroupType.add(jRadioButtonDatabase);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        buttonGroupType = new ButtonGroup();
        jDialog1 = new JDialog();
        jFileChooserSpecial = new JFileChooser();
        jPanel1 = new JPanel();
        jPanel3 = new JPanel();
        jButtonConnect = new JButton();
        jButtonRequest = new JButton();
        jScrollPane1 = new JScrollPane();
        jTextAreaContent = new JTextArea();
        jPanel2 = new JPanel();
        jRadioButtonXML = new JRadioButton();
        jRadioButtonSAM = new JRadioButton();
        jRadioButtonDatabase = new JRadioButton();
        jButtonTranslate = new JButton();

        jDialog1.getContentPane().add(jFileChooserSpecial, java.awt.BorderLayout.CENTER);

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        setTitle("Special");
        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel1.setBorder(new javax.swing.border.TitledBorder("\uc694\uccad"));
        jButtonConnect.setText("\uc811\uc18d");
        jPanel3.add(jButtonConnect);

        jButtonRequest.setText("\ubc1b\uae30");
        jButtonRequest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRequestActionPerformed(evt);
            }
        });

        jPanel3.add(jButtonRequest);

        jPanel1.add(jPanel3, java.awt.BorderLayout.NORTH);

        jScrollPane1.setViewportView(jTextAreaContent);

        jPanel1.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        jPanel2.setBorder(new javax.swing.border.TitledBorder("\ubcc0\ud658"));
        jRadioButtonXML.setSelected(true);
        jRadioButtonXML.setText("XML File");
        jPanel2.add(jRadioButtonXML);

        jRadioButtonSAM.setText("SAM File");
        jPanel2.add(jRadioButtonSAM);

        jRadioButtonDatabase.setText("Database");
        jPanel2.add(jRadioButtonDatabase);

        jButtonTranslate.setText("\ubcc0\ud658");
        jButtonTranslate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonTranslateActionPerformed(evt);
            }
        });

        jPanel2.add(jButtonTranslate);

        getContentPane().add(jPanel2, java.awt.BorderLayout.SOUTH);

        pack();
    }
    // </editor-fold>//GEN-END:initComponents

    private void jButtonTranslateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonTranslateActionPerformed
// TODO add your handling code here:
        if (document == null) {
            JOptionPane.showMessageDialog(this, "���� ���� �����Ͱ� �����ϴ�.", "����", JOptionPane.ERROR_MESSAGE);
            return;
        }
            
        try {
            if (jRadioButtonXML.isSelected()) {
                translateToXMLFile();
            } else if (jRadioButtonSAM.isSelected()) {
                translateToSAMFile();
            } else if (jRadioButtonDatabase.isSelected()) {
                translateToDatabase();
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "����", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
        }
    }//GEN-LAST:event_jButtonTranslateActionPerformed

    private void translateToXMLFile() throws Exception {
        int result = jFileChooserSpecial.showSaveDialog(this);
        
        if (result == JFileChooser.APPROVE_OPTION) {
            Writer writer = new FileWriter(jFileChooserSpecial.getSelectedFile());

            TransformerFactory tFactory = TransformerFactory.newInstance();
            Transformer transformer = tFactory.newTransformer();
            DOMSource source = new DOMSource(document);
            StreamResult target = new StreamResult(writer);

            transformer.setOutputProperty(OutputKeys.ENCODING, "EUC-KR");

            transformer.transform(source, target);
        }
    }
    
    private void translateToSAMFile() throws Exception {
        int result = jFileChooserSpecial.showSaveDialog(this);
        
        if (result == JFileChooser.APPROVE_OPTION) {
            Writer writer = new FileWriter(jFileChooserSpecial.getSelectedFile());
            
            DOMSource source = new DOMSource(document);
            StreamResult target = new StreamResult(writer);
            
            TransformerFactory tFactory = TransformerFactory.newInstance();
            Source style = tFactory.getAssociatedStylesheet(source, null, null, null);
            Transformer transformer = tFactory.newTransformer(style);
            
            transformer.transform(source, target);
        }
    }
    
    private void translateToDatabase() throws Exception {
        
    }
    
    private void jButtonRequestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRequestActionPerformed
// TODO add your handling code here:
        jFileChooserSpecial.setFileSelectionMode(JFileChooser.FILES_ONLY);
        
        int result = jFileChooserSpecial.showOpenDialog(this);
        
        if (result == JFileChooser.APPROVE_OPTION) {
            try {
                File selectedFile = jFileChooserSpecial.getSelectedFile();
                
                DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
                DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
                document = dBuilder.parse(selectedFile);
                
                Writer writer = new StringWriter();

                TransformerFactory tFactory = TransformerFactory.newInstance();
                Transformer transformer = tFactory.newTransformer();
                DOMSource source = new DOMSource(document);
                StreamResult target = new StreamResult(writer);

                transformer.setOutputProperty(OutputKeys.ENCODING, "EUC-KR");

                transformer.transform(source, target);

                jTextAreaContent.setText(writer.toString());
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(), "����", JOptionPane.ERROR_MESSAGE);
                ex.printStackTrace();
            }
            
/*
            File selectedFile = jFileChooserRecieve.getSelectedFile();
            
            FileReader reader = null;
            
            try {
                reader = new FileReader(selectedFile);
                
                int data;
                StringBuffer buffer = new StringBuffer();
                
                do {
                    data = reader.read();
                    
                    buffer.append((char) data);
                } while (data != -1);
                
                jTextAreaContent.setText(buffer.toString());
            } catch (IOException ioe) {
                JOptionPane.showMessageDialog(this, ioe.getMessage(), "����", JOptionPane.ERROR_MESSAGE);
                ex.printStackTrace();
            } finally {
                try { if (reader != null) reader.close(); } catch (Exception ex) {}
            }
 */
        }
    }//GEN-LAST:event_jButtonRequestActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SpecialJFrame().setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private ButtonGroup buttonGroupType;
    private JButton jButtonConnect;
    private JButton jButtonRequest;
    private JButton jButtonTranslate;
    private JDialog jDialog1;
    private JFileChooser jFileChooserSpecial;
    private JPanel jPanel1;
    private JPanel jPanel2;
    private JPanel jPanel3;
    private JRadioButton jRadioButtonDatabase;
    private JRadioButton jRadioButtonSAM;
    private JRadioButton jRadioButtonXML;
    private JScrollPane jScrollPane1;
    private JTextArea jTextAreaContent;
    // End of variables declaration//GEN-END:variables
    
    Document document;
}
